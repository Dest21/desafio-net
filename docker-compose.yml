services:
  postgres:
    image: postgres:15
    container_name: desafio-postgres
    environment:
      POSTGRES_DB: desafio_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - desafio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d desafio_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: desafio-backend
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=desafio_db;Username=postgres;Password=postgres123
      - JwtSettings__SecretKey=SuperSecretKeyForJWTTokenGeneration2024!
      - JwtSettings__Issuer=DesafioAPI
      - JwtSettings__Audience=DesafioClient
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - desafio-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: desafio-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    depends_on:
      - backend
    networks:
      - desafio-network

volumes:
  postgres_data:

networks:
  desafio-network:
    driver: bridge